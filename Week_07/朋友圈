 public int findCircleNum(int[][] M) {
        int n = M.length;
        if(n == 0){
            return 0;
        }

        UnionFind unionFind = new UnionFind(n);
        for(int i = 0 ; i < n ; i ++){
            for(int j = 0 ; j < i ; j ++){
                if(M[i][j] == 1){
                    unionFind.union(i,j);
                }
            }
        }
        return unionFind.count();
    }

    public class UnionFind {

        private int count;
        private int[] parent;
        private int[] size;

        public UnionFind(int n){
            this.count = n;
            this.parent = new int[n];
            this.size = new int[n];
            for(int i = 0 ; i < n ; i ++){
                parent[i] = i;
                size[i] =1;
            }
        }

        public void union(int p, int q){
            int rootP = find(p);
            int rootQ = find(q);
            if(rootP == rootQ){
                return;
            }

            if(size[rootP] > size[rootQ]){
                parent[rootQ] = rootP;
                size[rootP] +=size[rootQ];
            }else{
                parent[rootP] = rootQ;
                size[rootQ] += size[rootP];
            }
            count --;
        }

        private int find(int x){
            while(parent[x] != x){
                parent[x] = parent[parent[x]];
                x = parent[x];
            }
            return x;
        }

        public int count(){
            return count;
        }

    }